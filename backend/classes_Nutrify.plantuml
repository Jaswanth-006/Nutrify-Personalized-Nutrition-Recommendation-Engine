@startuml classes_Nutrify
set namespaceSeparator none
class "AppConfig" as backend.view.config.AppConfig {
  health_update_url : str
  home : str
  login_url : str
  search_url : str
  signIn_url : str
  start_url : str
}
class "DataBase" as backend.data_layer.repository.db.DataBase {
  close()
  createTables()
  deleteTable()
}
class "FoodModel" as backend.data_layer.Models.food_model.FoodModel {
  calorie : float
  energy :   [float]
  id :   [int]
  name : str
  protien :   [float]
  fromJson(json_data)
}
class "Foods" as backend.data_layer.repository.food_repository.Foods {
  getData()
  search_data(query)
}
class "HealthController" as backend.controller.health_controller.HealthController {
  heath_repository
  updateHealthModel(json_data)
}
class "HealthControllerInterface" as backend.controller.health_controller.HealthControllerInterface {
  {abstract}updateHealthModel(json_data)
}
class "HealthModel" as backend.data_layer.Models.health_model.HealthModel {
  age :   [int]
  allergy :   [int]
  bmi :   [float]
  diabetes :   [int]
  gender :   [str]
  height :   [float]
  hyper_tension :   [int]
  weight :   [float]
  fromJson(json_data)
}
class "HealthRepository" as backend.data_layer.repository.health_repository.HealthRepository {
  bmi(height, weight)
  updateHeathFields(json_data)
}
class "HeatlthRepositoryInterface" as backend.data_layer.repository.health_repository.HeatlthRepositoryInterface {
  {abstract}bmi()
  {abstract}updateHeathFields()
}
class "JaroWrinklerSearching" as backend.data_layer.repository.jaro.JaroWrinklerSearching {
  datas : list
  hybrid_search(query, top_n)
  jaro_similarity(s1, s2)
  jaro_winkler_similarity(s1, s2, prefix_scale)
}
class "ModelInterface" as backend.data_layer.Models.model.ModelInterface {
  {abstract}fromJson(data)
  jsonToTuple(json_data)
  {abstract}toDatabase(json_data)
}
class "TupleConversion" as backend.data_layer.Models.model.TupleConversion {
  columns
  values
}
class "UserAuth" as backend.controller.user_auth.UserAuth {
  login(json_data)
  signIn(json_data)
}
class "UserAuthInterface" as backend.controller.user_auth.UserAuthInterface {
  {abstract}login(json_data)
  {abstract}signIn(json_data)
}
class "UserModel" as backend.data_layer.Models.user_model.UserModel {
  email :   [str]
  id :   [int]
  name :   [str]
  fromJson(json_data)
  toDatabase(json_data)
}
class "UserRepository" as backend.data_layer.repository.user_repository.UserRepository {
  getUser(field, value)
  signIn(json_data)
}
backend.controller.health_controller.HealthController --|> backend.controller.health_controller.HealthControllerInterface
backend.controller.health_controller.HealthController --|> backend.data_layer.repository.health_repository.HealthRepository
backend.controller.user_auth.UserAuth --|> backend.controller.user_auth.UserAuthInterface
backend.data_layer.Models.food_model.FoodModel --|> backend.data_layer.Models.model.ModelInterface
backend.data_layer.Models.health_model.HealthModel --|> backend.data_layer.Models.model.ModelInterface
backend.data_layer.Models.health_model.HealthModel --|> backend.data_layer.Models.user_model.UserModel
backend.data_layer.Models.user_model.UserModel --|> backend.data_layer.Models.model.ModelInterface
backend.data_layer.repository.food_repository.Foods --|> backend.data_layer.repository.db.DataBase
backend.data_layer.repository.health_repository.HealthRepository --|> backend.data_layer.repository.health_repository.HeatlthRepositoryInterface
backend.data_layer.repository.health_repository.HealthRepository --|> backend.data_layer.repository.user_repository.UserRepository
backend.data_layer.repository.user_repository.UserRepository --|> backend.data_layer.repository.db.DataBase
backend.data_layer.repository.health_repository.HealthRepository --* backend.controller.health_controller.HealthController : heath_repository
backend.data_layer.repository.user_repository.UserRepository --* backend.controller.user_auth.UserAuth : __data
@enduml
