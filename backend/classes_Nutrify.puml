@startuml classes_Nutrify
set namespaceSeparator none
class "AppConfig" as backend.view.config.AppConfig {
  bad_request_code : int
  conflict_code : int
  created_code : int
  data_invalid : int
  food_update_url : str
  health_update_url : str
  home : str
  login_url : str
  not_found_code : int
  ok_code : int
  search_url : str
  signIn_url : str
  start_url : str
  unauthorized_code : int
}
class "DataBase" as backend.data_layer.repository.db.DataBase {
  close()
  connect()
  createTables()
  deleteTable()
}
class "FoodController" as backend.controller.food_controller.FoodController {
  food_repo
  updateFood(json_data)
}
class "FoodControllerInterface" as backend.controller.food_controller.FoodControllerInterface {
  {abstract}updateFood(json_data)
}
class "FoodModel" as backend.data_layer.Models.food_model.FoodModel {
  calorie : float
  energy : Optional[float]
  id : Optional[int]
  name : str
  protien : float
  similarity : Optional[int]
  fromJson(json_data)
  stringToList(text: str)
  {abstract}toDatabase(json_data)
  toJson()
}
class "FoodRepository" as backend.data_layer.repository.food_repository.FoodRepository {
  getData()
  search_data(query)
  updateFoodField(json_data)
}
class "FoodRepositoryInterface" as backend.data_layer.repository.food_repository.FoodRepositoryInterface {
  {abstract}getData()
  {abstract}search_data(query)
  {abstract}updateFoodField(json_data)
}
class "HealthController" as backend.controller.health_controller.HealthController {
  heath_repository
  updateHealthModel(json_data)
}
class "HealthControllerInterface" as backend.controller.health_controller.HealthControllerInterface {
  {abstract}updateHealthModel(json_data)
}
class "HealthModel" as backend.data_layer.Models.health_model.HealthModel {
  age : Optional[int]
  allergy : Optional[int]
  bmi : Optional[float]
  diabetes : Optional[int]
  gender : Optional[str]
  height : Optional[float]
  hyper_tension : Optional[int]
  weight : Optional[float]
  fromJson(json_data)
}
class "HealthRepository" as backend.data_layer.repository.health_repository.HealthRepository {
  bmi(height, weight)
  updateHealthFields(json_data)
}
class "HeatlthRepositoryInterface" as backend.data_layer.repository.health_repository.HeatlthRepositoryInterface {
  {abstract}bmi()
  {abstract}updateHealthFields()
}
class "JaroWrinklerSearching" as backend.data_layer.repository.jaro.JaroWrinklerSearching {
  datas : list
  hybrid_search(query, top_n)
  jaro_similarity(s1, s2)
  jaro_winkler_similarity(s1, s2, prefix_scale)
}
class "ModelInterface" as backend.data_layer.Models.model.ModelInterface {
  {abstract}fromJson(data)
  jsonToTuple(json_data)
  jsonToUpdate(query_value)
  {abstract}toDatabase(json_data)
}
class "TupleConversion" as backend.data_layer.Models.model.TupleConversion {
  columns
  values
}
class "UserAuth" as backend.controller.user_auth.UserAuth {
  login(json_data)
  signIn(json_data)
}
class "UserAuthInterface" as backend.controller.user_auth.UserAuthInterface {
  {abstract}login(json_data)
  {abstract}signIn(json_data)
}
class "UserModel" as backend.data_layer.Models.user_model.UserModel {
  email : Optional[str]
  id : Optional[int]
  name : Optional[str]
  fromJson(json_data)
  toDatabase(json_data)
}
class "UserRepository" as backend.data_layer.repository.user_repository.UserRepository {
  getUser(field, value)
  signIn(json_data)
  updateUser(json_data, id)
}
class "UserRepositoryInterface" as backend.data_layer.repository.user_repository.UserRepositoryInterface {
  {abstract}getUser(field, value)
  {abstract}signIn(json_data)
}
backend.controller.food_controller.FoodController --|> backend.controller.food_controller.FoodControllerInterface
backend.controller.health_controller.HealthController --|> backend.controller.health_controller.HealthControllerInterface
backend.controller.user_auth.UserAuth --|> backend.controller.user_auth.UserAuthInterface
backend.data_layer.Models.food_model.FoodModel --|> backend.data_layer.Models.model.ModelInterface
backend.data_layer.Models.health_model.HealthModel --|> backend.data_layer.Models.model.ModelInterface
backend.data_layer.Models.health_model.HealthModel --|> backend.data_layer.Models.user_model.UserModel
backend.data_layer.Models.user_model.UserModel --|> backend.data_layer.Models.model.ModelInterface
backend.data_layer.repository.food_repository.FoodRepository --|> backend.data_layer.repository.db.DataBase
backend.data_layer.repository.food_repository.FoodRepository --|> backend.data_layer.repository.food_repository.FoodRepositoryInterface
backend.data_layer.repository.health_repository.HealthRepository --|> backend.data_layer.repository.health_repository.HeatlthRepositoryInterface
backend.data_layer.repository.health_repository.HealthRepository --|> backend.data_layer.repository.user_repository.UserRepository
backend.data_layer.repository.user_repository.UserRepository --|> backend.data_layer.repository.db.DataBase
backend.data_layer.repository.user_repository.UserRepository --|> backend.data_layer.repository.user_repository.UserRepositoryInterface
backend.data_layer.repository.food_repository.FoodRepository --* backend.controller.food_controller.FoodController : food_repo
backend.data_layer.repository.health_repository.HealthRepository --* backend.controller.health_controller.HealthController : heath_repository
backend.data_layer.repository.user_repository.UserRepository --* backend.controller.user_auth.UserAuth : __data
@enduml
